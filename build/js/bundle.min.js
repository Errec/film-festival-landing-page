!function(o,t,e){"use strict";function l(){if(!("scrollBehavior"in t.documentElement.style)){var l=o.HTMLElement||o.Element,r=468,s={scroll:o.scroll||o.scrollTo,scrollBy:o.scrollBy,elScroll:l.prototype.scroll||c,scrollIntoView:l.prototype.scrollIntoView},i=o.performance&&o.performance.now?o.performance.now.bind(o.performance):Date.now;o.scroll=o.scrollTo=function(){n(arguments[0])?s.scroll.call(o,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):f.call(o,t.body,~~arguments[0].left,~~arguments[0].top)},o.scrollBy=function(){n(arguments[0])?s.scrollBy.call(o,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):f.call(o,t.body,~~arguments[0].left+(o.scrollX||o.pageXOffset),~~arguments[0].top+(o.scrollY||o.pageYOffset))},l.prototype.scroll=l.prototype.scrollTo=function(){if(n(arguments[0]))s.elScroll.call(this,arguments[0].left||arguments[0],arguments[0].top||arguments[1]);else{var o=arguments[0].left,t=arguments[0].top;f.call(this,this,"number"==typeof o?o:this.scrollLeft,"number"==typeof t?t:this.scrollTop)}},l.prototype.scrollBy=function(){var o=arguments[0];"object"==typeof o?this.scroll({left:o.left+this.scrollLeft,top:o.top+this.scrollTop,behavior:o.behavior}):this.scroll(this.scrollLeft+o,this.scrollTop+arguments[1])},l.prototype.scrollIntoView=function(){if(n(arguments[0]))s.scrollIntoView.call(this,arguments[0]||!0);else{var e=function(e){var l,r,s;do{l=(e=e.parentNode)===t.body,r=e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth,s="visible"===o.getComputedStyle(e,null).overflow}while(!l&&(!r||s));return l=r=s=null,e}(this),l=e.getBoundingClientRect(),r=this.getBoundingClientRect();e!==t.body?(f.call(this,e,e.scrollLeft+r.left-l.left,e.scrollTop+r.top-l.top),o.scrollBy({left:l.left,top:l.top,behavior:"smooth"})):o.scrollBy({left:r.left,top:r.top,behavior:"smooth"})}}}function c(o,t){this.scrollLeft=o,this.scrollTop=t}function n(o){if("object"!=typeof o||null===o||o.behavior===e||"auto"===o.behavior||"instant"===o.behavior)return!0;if("object"==typeof o&&"smooth"===o.behavior)return!1;throw new TypeError("behavior not valid")}function a(t){var e,l,s,c,n=(i()-t.startTime)/r;c=n=n>1?1:n,e=.5*(1-Math.cos(Math.PI*c)),l=t.startX+(t.x-t.startX)*e,s=t.startY+(t.y-t.startY)*e,t.method.call(t.scrollable,l,s),l===t.x&&s===t.y||o.requestAnimationFrame(a.bind(o,t))}function f(e,l,r){var n,f,p,h,u=i();e===t.body?(n=o,f=o.scrollX||o.pageXOffset,p=o.scrollY||o.pageYOffset,h=s.scroll):(n=e,f=e.scrollLeft,p=e.scrollTop,h=c),a({scrollable:n,method:h,startTime:u,startX:f,startY:p,x:l,y:r})}}"object"==typeof exports?module.exports={polyfill:l}:l()}(window,document);var scroolToSections=function(){var o=document.querySelector(".header__link-movies"),t=document.querySelector(".header__link-about"),e=document.querySelector(".header__link-contact"),l=document.querySelector(".movies"),r=document.querySelector(".infos-register"),s=document.querySelector(".contact");o.addEventListener("click",function(o){o.preventDefault(),l.scrollIntoView({behavior:"smooth"})}),t.addEventListener("click",function(o){o.preventDefault(),r.scrollIntoView({behavior:"smooth"})}),e.addEventListener("click",function(o){o.preventDefault(),s.scrollIntoView({behavior:"smooth"})})}();$(document).ready(function(){$(".movies__carousel").slick({arrows:!0,centerMode:!0,infinite:!0,slidesToScroll:4,speed:400,variableWidth:!0,responsive:[{breakpoint:1024,settings:{slidesToShow:2,slidesToScroll:2,infinite:!0}},{breakpoint:600,settings:{arrows:!1,infinite:!0,slidesToShow:2,slidesToScroll:2}},{breakpoint:480,settings:{arrows:!1,infinite:!0,slidesToShow:1,slidesToScroll:1}}]})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
